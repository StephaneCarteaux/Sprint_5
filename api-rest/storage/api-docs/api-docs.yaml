openapi: 3.0.0
info:
  title: 'Api Rest Stef - Documentation'
  description: 'L5 Swagger OpenApi description'
  contact:
    email: admin@example.com
  license:
    name: 'Apache 2.0'
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.0
servers:
  -
    url: 'http://api-rest:8888/api/v1'
    description: 'Demo API Server'
paths:
  /login:
    post:
      tags:
        - Login
      summary: 'Logs a user in'
      description: 'Logs a user into the application.'
      operationId: login
      requestBody:
        description: 'User credentials'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  example: password123
              type: object
      responses:
        200:
          description: 'Successfully logged in'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Successfully logged in'
                  token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6IjEyMzQ1Njc4OTAifQ==
                type: object
        403:
          description: 'The provided credentials are incorrect'
        422:
          description: 'The provided credentials are incorrect'
  /players:
    get:
      tags:
        - Users
      summary: 'List all players with stats'
      description: 'Retrieve a list of all players with their game statistics and the average win percentage.'
      operationId: listAllPlayersWithStats
      responses:
        200:
          description: 'List of players with their win percentage and average win percentage'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAllPlayersWithStats'
        401:
          description: Unauthorized
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Register
      summary: 'Registers a new user'
      description: 'Registers a new user in the application.'
      operationId: register
      requestBody:
        description: 'User registration data'
        required: true
        content:
          application/json:
            schema:
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: 'John Doe'
                nickname:
                  type: string
                  example: john_doe
                  nullable: true
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  example: password123
              type: object
      responses:
        201:
          description: 'Successfully registered'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Successfully registered'
                type: object
        422:
          description: 'Validation errors'
  '/players/{id}/games':
    get:
      tags:
        - Games
      summary: 'List player games with stats'
      description: 'Retrieve a list of games played by the player along with statistics.'
      operationId: listPlayerGamesWithStats
      parameters:
        -
          name: id
          in: path
          description: 'Player ID'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "List of games and player's win percentage"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPlayerGamesWithStats'
        401:
          description: Unauthorized
      security:
        -
          bearerAuth: []
    post:
      tags:
        - Games
      summary: 'Play a game'
      description: 'Rolls two dice for the player.'
      operationId: play
      parameters:
        -
          name: id
          in: path
          description: 'Player ID'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Dice roll results'
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      dice_1:
                        type: integer
                        example: 3
                      dice_2:
                        type: integer
                        example: 4
                    type: object
                type: object
        401:
          description: Unauthorized
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - Games
      summary: 'Delete player games'
      description: 'Deletes all games for a player.'
      operationId: deletePlayerGames
      parameters:
        -
          name: id
          in: path
          description: 'Player ID'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Player games deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Player games deleted successfully'
                type: object
        401:
          description: Unauthorized
      security:
        -
          bearerAuth: []
  /players/ranking:
    get:
      tags:
        - Ranking
      summary: 'Get ranking'
      description: 'Retrieve the ranking of players sorted by their win percentage.'
      operationId: getRanking
      responses:
        200:
          description: 'List of players with their win percentage'
          content:
            application/json:
              schema:
                properties:
                  data:
                    type: array
                    items:
                      properties:
                        nickname:
                          type: string
                          example: player1
                        games_won_percentage:
                          type: number
                          format: float
                          example: 75
                      type: object
                type: object
  /players/ranking/loser:
    get:
      tags:
        - Ranking
      summary: 'Get loser'
      description: 'Retrieve the player with the lowest win percentage.'
      operationId: getLoser
      responses:
        200:
          description: 'Player with the lowest win percentage'
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      nickname:
                        type: string
                        example: player1
                      games_won_percentage:
                        type: number
                        format: float
                        example: 25
                    type: object
                type: object
  /players/ranking/winner:
    get:
      tags:
        - Ranking
      summary: 'Get winner'
      description: 'Retrieve the player with the highest win percentage.'
      operationId: getWinner
      responses:
        200:
          description: 'Player with the highest win percentage'
          content:
            application/json:
              schema:
                properties:
                  data:
                    properties:
                      nickname:
                        type: string
                        example: player1
                      games_won_percentage:
                        type: number
                        format: float
                        example: 85
                    type: object
                type: object
  '/players/{id}':
    put:
      tags:
        - Users
      summary: 'Change player nickname'
      description: 'Change the nickname of a player.'
      operationId: changePlayerNickname
      parameters:
        -
          name: id
          in: path
          description: 'Player ID'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                nickname:
                  type: string
                  example: new_nickname
              type: object
      responses:
        200:
          description: 'Nickname updated successfully'
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                    example: 'Nickname updated successfully'
                  data:
                    properties:
                      name:
                        type: string
                        example: 'John Doe'
                      nickname:
                        type: string
                        example: john_doe
                    type: object
                type: object
        401:
          description: Unauthorized
        422:
          description: 'Validation error'
      security:
        -
          bearerAuth: []
components:
  schemas:
    Player:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'John Doe'
        nickname:
          type: string
          example: john
        registered_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00.000000Z'
        email:
          type: string
          format: email
          example: jVHrj@example.com
        email_verified_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00.000000Z'
        created_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00.000000Z'
        updated_at:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00.000000Z'
        games_won_percentage:
          type: number
          format: float
          example: 40
      type: object
    ListAllPlayersWithStats:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        average_percentage_of_games_won:
          type: number
          format: float
          example: 12
      type: object
    Game:
      properties:
        dice_1:
          type: integer
          example: 4
        dice_2:
          type: integer
          example: 3
        result:
          type: string
          example: win
      type: object
    ListPlayerGamesWithStats:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        games_won_percentage:
          type: number
          format: float
          example: 40
      type: object
  securitySchemes:
    bearerAuth:
      type: http
      in: header
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: Login
  -
    name: Register
  -
    name: Users
    description: 'User related endpoints'
  -
    name: Games
    description: 'Game related endpoints'
  -
    name: Ranking
    description: 'Ranking related endpoints'
